include('../../auto')

class Consequences {
	_alterations = []// [entity:[caracteristic:value]]
	_killed = []
	score = null
	isAlteringDanger = false
	hashcode = 17
	targets
	
	constructor(action){
		Benchmark.start("Consequences")
		construct(action)
		Benchmark.stop("Consequences")
	}
	
	constructor(action, consequences){
		Benchmark.start("Consequences.fromConseq")
		this._alterations = clone(consequences._alterations, 2)
		this._killed = clone(consequences._killed)
		this.hashcode = consequences.hashcode
		construct(action)
		Benchmark.stop("Consequences.fromConseq")
	}
	
	construct(action){
		this.targets = Targets.getTargets(action)

		// FIXME il faut aussi handle le cas où je lance un item aoe et je suis assez proche de la zone
		// pour être affecté....
		for(var target in this.targets){
			if(this._killed[target]) continue
			var ratioDmg = action.item.isAOE ? 1-(0.2*getCellDistance(action.to, target.cell)) : 1
			if(ratioDmg<=0){
				debugE('Bug in Consequences constructor, SHOULD NOT HAPPEN !')
				debugE(action)
				continue
			}
			for(var effect in action.item.effects) {
				this.updateConsequences(effect, Fight.self, target, ratioDmg)
			}
		}
	}
	
	add(entity, key, effect){
		if(!_alterations[entity]) _alterations[entity] = []
		var isOverTime = effect instanceof EffectOverTime
		var value = isOverTime ? effect.value : effect
		
		_alterations[entity][key] += value // pour null, devrait se comporter comme si ça contenait 0
		// ça ne marche qu'avec += en leekscriptv1, pas tester en v1.1 comment ça marche...
		// j'avais des bugs sur les -=, donc il faut faire += -value si le comportement est le mm ici.
		
		if(entity==Fight.self && (
			   key==Stats.HP
			|| key==Stats.ABSSHIELD
			|| key==Stats.RELSHIELD
			|| key==Stats.DEBUFF)){
				this.isAlteringDanger=true
				this.hashcode = 31 * this.hashcode + (value|0)
		} else if(!entity.isFriend && (
			   key==Stats.DEBUFF
			|| key==Stats.STR
			|| key==Stats.TP
			|| key==Stats.MP)){
				this.isAlteringDanger=true
				this.hashcode = 31 * this.hashcode + entity.id
				this.hashcode = 31 * this.hashcode + (value|0)
		}
		
		// update du score
		if(!isOverTime) this.score+= value * Scoring.getCoef(entity, key)
		else this.score+=value*Scoring.getCoef(entity, key)*Scoring.offensive_duration_mitigation[effect.duration]
	}
	
	addKill(entity){
		this.isAlteringDanger=true
		this.hashcode = 31 * this.hashcode + entity.id
		this._killed[entity]=true
		this.score+= Scoring.KILL_VALUE * Scoring.getCoef(entity, Stats.KILL)
	}
	
	getAlterations(){
		return _alterations
	}
		
	isKilled(entity){
		return _killed[entity]
	}
	
	getAlteration(entity, key){
		return _alterations[entity][key]
	}
	
	getScore(){
		return this.score
	}
	
	updateConsequences(effect, entitySource, entityTarget, ratioDmg) {
		// fixme: ce if marche pas, j'ai tjr true mm pour EFFECT_DAMAGE
		//if(!ItemEffect.convertToValue[this.type]) debugW('unhandledEffect on ItemEffect typeID: '+ this.type)
		var target = effect.modifCaster ? entitySource : entityTarget
		ratioDmg = effect.modifCaster ? 1 : ratioDmg
		return Consequences.convertToValue[effect.type](effect, entitySource, target, ratioDmg, this)
	}
		
		
	// TODO reste à faire l'agi/les crit, et avgmin/avgmax ?
	// TODO EROSION sur la durée ?
	static convertToValue = [
		EFFECT_DAMAGE: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			var targetsCount = effect.multiplyByTarget ? count(conseq.targets) : 1
			var beforeShield = effect.avg *targetsCount *ratioDmg *(1+(entitySource.getCurrentStr(conseq)/100))
				*(1+(entitySource.getCurrentPwr(conseq)/100)) // TODO power in consequences !!!!
			var value = (beforeShield *(1-(entityTarget.getCurrentRel(conseq)/100))) 
				- entityTarget.getCurrentAbs(conseq)
			value = value < 0 ? 0 : value // on ne fait pas de dmg négatif
			conseq.add(entityTarget, Stats.HP, -value)
			
			if(entityTarget.getCurrentHP(conseq) <= 0) 
				conseq.addKill(entityTarget)
			// TODO if killed leek, add all bulb in kill, if tower add win score ?

			// érosion !
			conseq.add(entityTarget, Stats.HPMAX, -value/20) // TODO le 20 ici devrait être dans une constante
			
			// vol de vie
			var lifeSteal = value * (entitySource.getCurrentWsd(conseq)/1000)
			var lifeMissing = entitySource.getCurrentHPMissing(conseq)
			lifeSteal = lifeSteal>lifeMissing ? lifeMissing : lifeSteal
			if(lifeSteal>0) conseq.add(entitySource, Stats.HP, lifeSteal)

			// dmg return
			var dmgReturn = beforeShield * (entityTarget.getCurrentDmgReturn(conseq)/100)
			if(dmgReturn>0){
				conseq.add(entitySource, Stats.HP, -dmgReturn)
				
				// érosion !
				conseq.add(entitySource, Stats.HPMAX, -dmgReturn/20) // TODO le 20 ici devrait être dans constante
				
				if(dmgReturn>=entitySource.getCurrentHP(conseq)) 
					conseq.addKill(entitySource) 
			}
		},
		EFFECT_POISON: function(effect, entitySource, entityTarget, ratioDmg, conseq){
			// pas de tests sur stackable car tous les poisons sont stackable actuellement
			// devrait être au niveau au dessus si d'autres items que covid ont notReplaceable, en attendant, ici on économise des opérations.
			if(effect.notReplaceable){
				if(entityTarget.getItemEffects(effect.item)) return;
			}
			
			// FIXME: dans mon autre IA, je gère deux notions, les dmgNextTurn, qui pemettent de définir un kill
			// en solo, et les dmg*duration, qui doivent être minoré plus ça dure
			// TODO réfléchir à comment j'organise l'infos dans HPTIME... ptete besoin d'objet hptime avec value duration dans les conseq ??
			
			var value = effect.avg *(1+(entitySource.getCurrentMgc(conseq)/100)) *ratioDmg
				*(1+(entitySource.getCurrentPwr(conseq)/100)) *effect.duration // TODO power in consequences !!!!
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.HPTIME, eot)
			
			// érosion ! c'est moche de rediv par durée, FIXME quand j'aurais géré la durée dans les conseq
			conseq.add(entityTarget, Stats.HPMAX, -value/effect.duration/10)
			//TODO le 10 au dessus devrait être dans une constante
		},
		EFFECT_LIFE_DAMAGE: function(effect, entitySource, entityTarget, ratioDmg, conseq){
			var beforeShield = entitySource.life*(effect.avg/100)
			var value = (beforeShield *(1-(entityTarget.getCurrentRel(conseq)/100))) 
				- entityTarget.getCurrentAbs(conseq)
			value = value < 0 ? 0 : value // on ne fait pas de dmg négatif
			conseq.add(entityTarget, Stats.HP, -value)
			
			if(entityTarget.getCurrentHP(conseq) <= 0) 
				conseq.addKill(entityTarget)
			// TODO if killed leek, add all bulb in kill, if tower add win score ?

			// érosion !
			conseq.add(entityTarget, Stats.HPMAX, -value/20) // TODO le 20 ici devrait être dans une constante
			
			if(entityTarget != entitySource){
				// dmg return
				var dmgReturn = beforeShield * (entityTarget.getCurrentDmgReturn(conseq)/100)
				if(dmgReturn>0){
					conseq.add(entitySource, Stats.HP, -dmgReturn)
					// érosion !
					conseq.add(entitySource, Stats.HPMAX, -dmgReturn/20) // TODO le 20 ici devrait être dans constante
					
					if(dmgReturn>=entitySource.getCurrentHP(conseq))
						conseq.addKill(entitySource) 
				}
			}
		},
		EFFECT_NOVA_DAMAGE: function(effect, entitySource, entityTarget, ratioDmg, conseq){
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			value = min(value, entityTarget.getCurrentHPMissing(conseq))
			conseq.add(entityTarget, Stats.HPMAX, -value)
		},
		EFFECT_HEAL: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(effect.duration>1){ // HPTIME
				if(!effect.stackable){
					var itemEffects = entityTarget.getItemEffects(effect.item)
					if(itemEffects){
						// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
						var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
						conseq.add(entityTarget, Stats.HPTIME, eot)
					}
				}
				var value = effect.avg*(1+(entitySource.getCurrentWsd(conseq)/100)) *ratioDmg
				var eot = EffectOverTime(effect.item, value, effect.duration)
				conseq.add(entityTarget, Stats.HPTIME, eot)
			} else { // HP
				var value = effect.avg*(1+(entitySource.getCurrentWsd(conseq)/100)) *ratioDmg
				value = min(value, entityTarget.getCurrentHPMissing(conseq))
				conseq.add(entityTarget, Stats.HP, value)
			}
		},
		EFFECT_BOOST_MAX_LIFE: function(effect, entitySource, entityTarget, ratioDmg, conseq){
			var value = effect.avg *(1+(entitySource.getCurrentWsd(conseq)/100)) *ratioDmg
			conseq.add(entityTarget, Stats.HPMAX, value)
			conseq.add(entityTarget, Stats.HP, value)
		},
		EFFECT_NOVA_VITALITY: function(effect, entitySource, entityTarget, ratioDmg, conseq){
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			conseq.add(entityTarget, Stats.HPMAX, value)
		},
		EFFECT_ABSOLUTE_SHIELD: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.ABSSHIELD, eot)
				}
			}
			var value = effect.avg*(1+(entitySource.getCurrentRst(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.ABSSHIELD, eot)
		},
		EFFECT_RELATIVE_SHIELD: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.RELSHIELD, eot)
				}
			}
			var value = effect.avg*(1+(entitySource.getCurrentRst(conseq)/100)) *ratioDmg // *effect.duration
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.RELSHIELD, value)
		},
		EFFECT_ABSOLUTE_VULNERABILITY: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de check stackable car always stackable actuellement
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.ABSSHIELD, eot)
		},
		EFFECT_VULNERABILITY: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de check stackable car always stackable actuellement
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.RELSHIELD, eot)
		},
		EFFECT_STEAL_ABSOLUTE_SHIELD: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de check stackable car always stackable actuellement
			var value = effect.avg *ratioDmg // *effect.duration
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.ABSSHIELD, eot)
		},
		EFFECT_DAMAGE_RETURN: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.DMGRETURN, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentAgi(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.DMGRETURN, eot)
		},
		EFFECT_RAW_BUFF_STRENGTH: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.STR, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.STR, eot)
		},
		EFFECT_RAW_BUFF_MAGIC: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.MGC, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.MGC, eot)
		},
		EFFECT_RAW_BUFF_AGILITY: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.AGI, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.AGI, eot)
		},
		EFFECT_RAW_BUFF_WISDOM: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.WSD, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.WSD, eot)
		},
		EFFECT_RAW_BUFF_RESISTANCE: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.RST, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.RST, eot)
		},
		EFFECT_RAW_BUFF_TP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.TP, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.TP, eot)
		},
		EFFECT_RAW_BUFF_MP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.MP, eot)
				}
			}
			var value = effect.avg *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.MP, eot)
		},
		EFFECT_BUFF_STRENGTH: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.STR, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.STR, eot)
		},
		EFFECT_BUFF_AGILITY: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.AGI, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.AGI, eot)
		},
		EFFECT_BUFF_WISDOM: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.WSD, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.WSD, eot)
		},
		EFFECT_BUFF_RESISTANCE: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.RST, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.RST, eot)
		},
		EFFECT_BUFF_TP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.TP, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.TP, eot)
		},
		EFFECT_BUFF_MP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			if(!effect.stackable){
				var itemEffects = entityTarget.getItemEffects(effect.item)
				if(itemEffects){
					// entityEffects[0].value : if not stackable, only 1 effect in array, so [0]
					var eot = EffectOverTime(effect.item, -itemEffects[0].value, itemEffects[0].turns)
					conseq.add(entityTarget, Stats.MP, eot)
				}
			}
			var value = effect.avg *(1+(entitySource.getCurrentSnc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, value, effect.duration)
			conseq.add(entityTarget, Stats.MP, eot)
		},
		EFFECT_SHACKLE_STRENGTH: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de tests sur stackable car toutes les entraves sont stackable actuellement
			var value = effect.avg *(1+(entitySource.getCurrentMgc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.STR, eot)
		},
		EFFECT_SHACKLE_MAGIC: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de tests sur stackable car toutes les entraves sont stackable actuellement
			var value = effect.avg *(1+(entitySource.getCurrentMgc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.MGC, eot)
		},
		EFFECT_SHACKLE_TP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de tests sur stackable car toutes les entraves sont stackable actuellement
			var value = effect.avg *(1+(entitySource.getCurrentMgc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.TP, eot)
		},
		EFFECT_SHACKLE_MP: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// pas de tests sur stackable car toutes les entraves sont stackable actuellement
			var value = effect.avg *(1+(entitySource.getCurrentMgc(conseq)/100)) *ratioDmg
			var eot = EffectOverTime(effect.item, -value, effect.duration)
			conseq.add(entityTarget, Stats.MP, eot)
		},
		EFFECT_DEBUFF: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			for(var entityEffect in entityTarget.effects){
				// ici le CONVERTER sert à set la value en négatif si c'est un malus, genre un poison fait
				// des dmg en HPTIME, il en redonne pas.
				var value = entityEffect.value * (effect.avg/100) *TargetType.CONVERTER[entityEffect.type]
				var eot = EffectOverTime(effect.item, -value, entityEffect.turns)
				var stat = Stats.entityEffectType_to_stats[entityEffect.type]
				if(stat==null) debugE("LIBERATION effect to stat unhandled :"+entityEffect)
				conseq.add(entityTarget, stat, eot)
			}
			// TODO FIX THIS FUNCTION §§§§§§§§§
			// probablement un bug car l'algo fait pas la diff entre HPTIME vaccin & poison... 
			// TODO check if effect is irreductible ?
		},
		EFFECT_ANTIDOTE: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// TODO
		},
		EFFECT_KILL: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// TODO
		},
		EFFECT_AFTEREFFECT: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// TODO
		},
		EFFECT_PROPAGATION: function(effect, entitySource, entityTarget, ratioDmg, conseq) {
			// TODO
		},
	]
	
	computeScore(){
		var totalScore = 0;
		for(var entity:var key in this._alterations){
			var value = this.getAlteration(entity, key)
			if(key == Stats.HP) 			totalScore+= entity.isFriend ? value : -value
			if(key == Stats.ABSSHIELD) 	totalScore+= entity.isFriend ? value*3 : -(value*3)
			if(key == Stats.STR) 		totalScore+= entity.isFriend ? value : -value
			
		}
		for(var entity:var bool in this._killed){
			var killScore = 10000
			killScore*= entity.isBulb ? 0.5 : 1
			totalScore+= entity.isFriend ? -killScore : killScore
		}
		return totalScore
	}
	
	string(){
		var str = "<Consequences"
		for(var entity:var alteration in this._alterations){
			str+= "\n" + entity.name + ":"
			for(var strKey in Stats.getFields()){
				var key = Stats.getInstance()[strKey]
				//var key = Stats.getInstance()[strKey]
				if(alteration[key] != null) str+= "|"+strKey+": "+round(alteration[key])
			}
			/*
			for(var key:var value in alteration){
				if(key == Stats.HP) 			str+= "|HP: "+round(value)
				if(key == Stats.ABSSHIELD) 	str+= "|ABSSHIELD: "+round(value)
				if(key == Stats.STR) 		str+= "|STR: "+round(value)
			}
			*/
		}
		for(var entity:var isDead in this._killed) str+= "\n|KILL: "+ entity
		str+="\nhashcode:"+this.hashcode+">"
		return str
	}
}