/*
 * Objet contenant les informations correspondante a une item
 * On en instancie un pour chacun des équipements du jeu
 */
class Item {
	id
	name
	isWeap
	haveCD
	minRange
	maxRange
	isInLine
	needLOS
	cost
	area
	effects = []
	constructor(id) {
		this.id = id
		this.name = getWeaponName(id)+getChipName(id)
		this.isWeap = isWeapon(id)
		if(this.isWeap){
			this.haveCD = false
			this.minRange = getWeaponMinRange(id)
			this.maxRange = getWeaponMaxRange(id)
			this.isInLine = isInlineWeapon(id)
			this.needLOS = weaponNeedLos(id)
			this.cost = getWeaponCost(id)
			this.area = getWeaponArea(id)
			for(var e in getWeaponEffects(id)){
				push(this.effects, ItemEffect(e))
			}
		} else {
			this.haveCD = getChipCooldown(id)!=0
			this.minRange = getChipMinRange(id)
			this.maxRange = getChipMaxRange(id)
			this.isInLine = isInlineChip(id)
			this.needLOS = chipNeedLos(id)
			this.cost = getChipCost(id)
			this.area = getChipArea(id)
			for(var e in getChipEffects(id)){
				push(this.effects, ItemEffect(e))
			}
		}	
	}
	
	/*
	 * VÃ©rifie si je peux utiliser une item sur une cellule, si oui utilise l'item
	 * @param cell cellule de type Cell représentant l'endroit ou je veux utiliser l'Item avec id: (this.id)
	 */
	useItemOnCell(cell){
		if(this.isWeap){
			if(getWeapon(Fight.self)!=this.id) setWeapon(this)
			useWeaponOnCell(cell.id)
		} else useChipOnCell(this.id, cell.id)
	}
	
	/*
	 * Format chaîne de caracteres utilisée pour des tests / debugs.
	 */
	string() {
		return "<Item "+this.name+">"
	}
}