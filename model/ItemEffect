include('../auto')

/*
 * Objet contenant les effets calculés correspondants à un item de type Item
 */
class ItemEffect {
	type
	min
	max
	avg
	avgmax
	avgmin
	duration
	targets
	modifiers
	targetType
	stackable = false
	multiplyByTarget = false
	modifCaster = false
	constructor(effect){
		this.type = effect[0]
		this.min = effect[1]
		this.max = effect[2]
		this.avg = (effect[1]+effect[2])/2
		this.avgmax = (effect[1]+effect[2]*3)/4
		this.avgmin = (effect[1]*3+effect[2])/4
		this.duration = effect[3] == 0 ? 1 : effect[3]
		this.targets = effect[4]
		this.modifiers = effect[5]
		this.targetType = TargetType(this)
		this.stackable = this.modifiers & EFFECT_MODIFIER_STACKABLE
		this.multiplyByTarget = this.modifiers & EFFECT_MODIFIER_MULTIPLIED_BY_TARGETS
		this.modifCaster = this.modifiers & EFFECT_MODIFIER_ON_CASTER
	}
	
	getValue(entitySource, entityTarget) {
		return ItemEffect.convertToValue[this.type](this, entitySource, entityTarget)
	}
	
	static convertToValue = [
		EFFECT_DAMAGE: function(effect, entitySource, entityTarget) {
			var value = effect.avg*(1+(entitySource.str/100))*(1+(entitySource.pwr/100));
			value = (value /* multiplier par laoe ratio ici*/ *(1-(entityTarget.relShield/100))) - entityTarget.absShield;
			return max(value, 0)
		},
		EFFECT_HEAL: function(effect, entitySource, entityTarget) {
			var value = effect.avg*(1+(entitySource.wsd/100));
			return max(value, entityTarget.lifeMissing)
		},
		EFFECT_ABSOLUTE_SHIELD: function(effect, entitySource, entityTarget) {
			var value = effect.avg*(1+(entitySource.rst/100));
			return value
		},
		EFFECT_RAW_BUFF_STRENGTH: function(effect, entitySource, entityTarget) {
			var value = effect.avg;
			return value
		},
	]
	
	/*
	 * Format chaîne de caracteres utilisée pour des tests / debugs.
	 */
	string() {
		return "<ItemEffect min:"+round(this.min)+"/max:"+round(this.max)+"/duration:"+this.duration+">"
	}
}