include('../auto')

/*
 * Objet contenant les effets calculés correspondants à un item de type Item
 */
class ItemEffect {
	name
	type
	min
	max
	avg
	avgmax
	avgmin
	duration
	targets
	modifiers
	targetType
	stackable = false
	multiplyByTarget = false
	modifCaster = false
	irreductible = false
	constructor(effect, name){
		this.name = name
		this.type = effect[0]
		this.min = effect[1]
		this.max = effect[2]
		this.avg = (effect[1]+effect[2])/2
		this.avgmax = (effect[1]+effect[2]*3)/4
		this.avgmin = (effect[1]*3+effect[2])/4
		this.duration = effect[3] == 0 ? 1 : effect[3]
		this.targets = effect[4]
		this.modifiers = effect[5]
		// désigne le type de cible intéressante pour cet effet
		this.targetType = TargetType(this)
		if(this.modifiers & EFFECT_MODIFIER_STACKABLE) this.stackable = true 
		if(this.modifiers & EFFECT_MODIFIER_MULTIPLIED_BY_TARGETS) this.multiplyByTarget = true
		if(this.modifiers & EFFECT_MODIFIER_ON_CASTER) this.modifCaster = true
		if(this.modifiers & EFFECT_MODIFIER_IRREDUCTIBLE) this.irreductible = true
	}
	
	updateConsequences(entitySource, entityTarget, ratioDmg, consequences) {
		// fixme: ce if marche pas, j'ai tjr true mm pour EFFECT_DAMAGE
		//if(!ItemEffect.convertToValue[this.type]) debugW('unhandledEffect on ItemEffect typeID: '+ this.type)
		return ItemEffect.convertToValue[this.type](this, entitySource, entityTarget, ratioDmg, consequences)
	}
	
	static convertToValue = [
		EFFECT_DAMAGE: function(effect, entitySource, entityTarget, ratioDmg, consequences) {
			var value = effect.avg*(1+(entitySource.str/100))*(1+(entitySource.pwr/100))
			value = (value *ratioDmg *(1-(entityTarget.relShield/100))) - entityTarget.absShield
			value = value<0?0:value
			consequences.add(entityTarget, Consequences.HP, -value)
			
			if(entityTarget.getCurrentHP(consequences) <= 0) 
				consequences.add(entityTarget, Consequences.KILL)
		},
		EFFECT_HEAL: function(effect, entitySource, entityTarget, ratioDmg, consequences) {
			var value = effect.avg*(1+(entitySource.wsd/100)) *ratioDmg
			value = min(value, entityTarget.lifeMissing)
			consequences.add(entityTarget, Consequences.HP, value)
		},
		EFFECT_ABSOLUTE_SHIELD: function(effect, entitySource, entityTarget, ratioDmg, consequences) {
			var value = effect.avg*(1+(entitySource.rst/100)) *ratioDmg
			consequences.add(entityTarget, Consequences.ABSSHIELD, value)
		},
		EFFECT_RAW_BUFF_STRENGTH: function(effect, entitySource, entityTarget, ratioDmg, consequences) {
			var value = effect.avg *ratioDmg
			consequences.add(entityTarget, Consequences.STR, value)
		},
	]
	
	/*
	 * Format chaîne de caracteres utilisée pour des tests / debugs.
	 */
	string() {
		return "<ItemEffect "+this.name+">"
	}
}